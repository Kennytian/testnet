/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auction, AuctionInterface } from "../Auction";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "auctionState",
    outputs: [
      {
        internalType: "enum Auction.State",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finalizeAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBidder",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBindingBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ipfsHash",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "placeBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460006101000a81548160ff021916908360038111156200009f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550436001819055506003600154620000bc9190620001af565b6002819055506040518060200160405280600081525060039080519060200190620000e9929190620000ff565b50670de0b6b3a7640000600881905550620002aa565b8280546200010d9062000216565b90600052602060002090601f0160209004810192826200013157600085556200017d565b82601f106200014c57805160ff19168380011785556200017d565b828001600101855582156200017d579182015b828111156200017c5782518255916020019190600101906200015f565b5b5090506200018c919062000190565b5090565b5b80821115620001ab57600081600090555060010162000191565b5090565b6000620001bc826200020c565b9150620001c9836200020c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200020157620002006200024c565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200022f57607f821691505b602082108114156200024657620002456200027b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610ee080620002ba6000396000f3fe60806040526004361061009c5760003560e01c80638fa8b790116100645780638fa8b7901461018a57806391f90157146101a1578063c623674f146101cc578063ecfc7ecc146101f7578063f5b56c5614610201578063f77282ab1461022c5761009c565b8063083c6323146100a157806348cd4cb1146100cc57806362ea82db146100f75780637fb45099146101345780638da5cb5b1461015f575b600080fd5b3480156100ad57600080fd5b506100b6610243565b6040516100c39190610c48565b60405180910390f35b3480156100d857600080fd5b506100e1610249565b6040516100ee9190610c48565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610b61565b61024f565b60405161012b9190610c48565b60405180910390f35b34801561014057600080fd5b50610149610267565b6040516101569190610c0b565b60405180910390f35b34801561016b57600080fd5b5061017461027a565b6040516101819190610bf0565b60405180910390f35b34801561019657600080fd5b5061019f61029e565b005b3480156101ad57600080fd5b506101b6610349565b6040516101c39190610bf0565b60405180910390f35b3480156101d857600080fd5b506101e161036f565b6040516101ee9190610c26565b60405180910390f35b6101ff6103fd565b005b34801561020d57600080fd5b50610216610719565b6040516102239190610c48565b60405180910390f35b34801561023857600080fd5b5061024161071f565b005b60025481565b60015481565b60076020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f657600080fd5b6003600460006101000a81548160ff02191690836003811115610342577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b0217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003805461037c90610daf565b80601f01602080910402602001604051908101604052809291908181526020018280546103a890610daf565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561045657600080fd5b60015443101561046557600080fd5b60025443111561047457600080fd5b600160038111156104ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460009054906101000a900460ff1660038111156104f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461050057600080fd5b606434101561050e57600080fd5b600034600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461055b9190610c7f565b9050600554811161056b57600080fd5b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116106565761064b600854826105e49190610c7f565b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b31565b600581905550610716565b6106ce8160085460076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106c99190610c7f565b610b31565b60058190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60055481565b600380811115610758577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460009054906101000a900460ff1660038111156107a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14806107ad575060025443115b6107b657600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061084f57506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b61085857600080fd5b600080600380811115610894577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460009054906101000a900460ff1660038111156108dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561092c57339150600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050610ae6565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156109ad5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506005549050610ae5565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610a9e57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060055460076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a979190610cd5565b9050610ae4565b339150600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b5b5b8173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b2c573d6000803e3d6000fd5b505050565b6000818311610b4257829050610b46565b8190505b92915050565b600081359050610b5b81610e93565b92915050565b600060208284031215610b7357600080fd5b6000610b8184828501610b4c565b91505092915050565b610b9381610d1b565b82525050565b610ba281610d6a565b82525050565b6000610bb382610c63565b610bbd8185610c6e565b9350610bcd818560208601610d7c565b610bd681610e6e565b840191505092915050565b610bea81610d60565b82525050565b6000602082019050610c056000830184610b8a565b92915050565b6000602082019050610c206000830184610b99565b92915050565b60006020820190508181036000830152610c408184610ba8565b905092915050565b6000602082019050610c5d6000830184610be1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610c8a82610d60565b9150610c9583610d60565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cca57610cc9610de1565b5b828201905092915050565b6000610ce082610d60565b9150610ceb83610d60565b925082821015610cfe57610cfd610de1565b5b828203905092915050565b6000610d1482610d40565b9050919050565b6000610d2682610d40565b9050919050565b6000819050610d3b82610e7f565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610d7582610d2d565b9050919050565b60005b83811015610d9a578082015181840152602081019050610d7f565b83811115610da9576000848401525b50505050565b60006002820490506001821680610dc757607f821691505b60208210811415610ddb57610dda610e3f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60048110610e9057610e8f610e10565b5b50565b610e9c81610d09565b8114610ea757600080fd5b5056fea26469706673582212206c31d1dd10cb8b5f95855f793e4d429d5de8945a1b90c1ca78c61a51f4d47dfb64736f6c63430008040033";

export class Auction__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auction> {
    return super.deploy(overrides || {}) as Promise<Auction>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Auction {
    return super.attach(address) as Auction;
  }
  connect(signer: Signer): Auction__factory {
    return super.connect(signer) as Auction__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionInterface {
    return new utils.Interface(_abi) as AuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auction {
    return new Contract(address, _abi, signerOrProvider) as Auction;
  }
}
