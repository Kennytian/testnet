/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auction, AuctionInterface } from "../Auction";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "auctionState",
    outputs: [
      {
        internalType: "enum Auction.State",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBidder",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBindingBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ipfsHash",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "placeBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460006101000a81548160ff021916908360038111156200009f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555043600181905550619d80600154620000bd9190620001a9565b6002819055506040518060200160405280600081525060039080519060200190620000ea929190620000f9565b506064600881905550620002a4565b828054620001079062000210565b90600052602060002090601f0160209004810192826200012b576000855562000177565b82601f106200014657805160ff191683800117855562000177565b8280016001018555821562000177579182015b828111156200017657825182559160200191906001019062000159565b5b5090506200018691906200018a565b5090565b5b80821115620001a55760008160009055506001016200018b565b5090565b6000620001b68262000206565b9150620001c38362000206565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620001fb57620001fa62000246565b5b828201905092915050565b6000819050919050565b600060028204905060018216806200022957607f821691505b6020821081141562000240576200023f62000275565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6109ab80620002b46000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b1461014957806391f9015714610174578063c623674f1461019f578063ecfc7ecc146101ca578063f5b56c56146101d457610086565b8063083c63231461008b57806348cd4cb1146100b657806362ea82db146100e15780637fb450991461011e575b600080fd5b34801561009757600080fd5b506100a06101ff565b6040516100ad9190610747565b60405180910390f35b3480156100c257600080fd5b506100cb610205565b6040516100d89190610747565b60405180910390f35b3480156100ed57600080fd5b5061010860048036038101906101039190610660565b61020b565b6040516101159190610747565b60405180910390f35b34801561012a57600080fd5b50610133610223565b604051610140919061070a565b60405180910390f35b34801561015557600080fd5b5061015e610236565b60405161016b91906106ef565b60405180910390f35b34801561018057600080fd5b5061018961025a565b60405161019691906106ef565b60405180910390f35b3480156101ab57600080fd5b506101b4610280565b6040516101c19190610725565b60405180910390f35b6101d261030e565b005b3480156101e057600080fd5b506101e961062a565b6040516101f69190610747565b60405180910390f35b60025481565b60015481565b60076020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003805461028d9061087a565b80601f01602080910402602001604051908101604052809291908181526020018280546102b99061087a565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561036757600080fd5b60015442101561037657600080fd5b60025443111561038557600080fd5b600160038111156103bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600460009054906101000a900460ff166003811115610407577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1461041157600080fd5b606434101561041f57600080fd5b600034600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461046c919061077e565b9050600554811161047c57600080fd5b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116105675761055c600854826104f5919061077e565b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610630565b600581905550610627565b6105df8160085460076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105da919061077e565b610630565b60058190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60055481565b600081831161064157829050610645565b8190505b92915050565b60008135905061065a8161095e565b92915050565b60006020828403121561067257600080fd5b60006106808482850161064b565b91505092915050565b610692816107e6565b82525050565b6106a181610835565b82525050565b60006106b282610762565b6106bc818561076d565b93506106cc818560208601610847565b6106d581610939565b840191505092915050565b6106e98161082b565b82525050565b60006020820190506107046000830184610689565b92915050565b600060208201905061071f6000830184610698565b92915050565b6000602082019050818103600083015261073f81846106a7565b905092915050565b600060208201905061075c60008301846106e0565b92915050565b600081519050919050565b600082825260208201905092915050565b60006107898261082b565b91506107948361082b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107c9576107c86108ac565b5b828201905092915050565b60006107df8261080b565b9050919050565b60006107f18261080b565b9050919050565b60008190506108068261094a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610840826107f8565b9050919050565b60005b8381101561086557808201518184015260208101905061084a565b83811115610874576000848401525b50505050565b6000600282049050600182168061089257607f821691505b602082108114156108a6576108a561090a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6004811061095b5761095a6108db565b5b50565b610967816107d4565b811461097257600080fd5b5056fea2646970667358221220c4fc935460a33a90f994342a45e097789f4affbe46b941b151d9384dd8e790c564736f6c63430008040033";

export class Auction__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auction> {
    return super.deploy(overrides || {}) as Promise<Auction>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Auction {
    return super.attach(address) as Auction;
  }
  connect(signer: Signer): Auction__factory {
    return super.connect(signer) as Auction__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionInterface {
    return new utils.Interface(_abi) as AuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auction {
    return new Contract(address, _abi, signerOrProvider) as Auction;
  }
}
