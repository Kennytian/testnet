/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lottery, LotteryInterface } from "../Lottery";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "manager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pickWinner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "players",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "random",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061095f806100616000396000f3fe60806040526004361061004e5760003560e01c806312065fe014610107578063481c6a75146101325780635d495aea1461015d5780635ec01e4d14610174578063f71d96cb1461019f57610102565b366101025767016345785d8a0000341461009d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009490610773565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550005b600080fd5b34801561011357600080fd5b5061011c6101dc565b60405161012991906107b3565b60405180910390f35b34801561013e57600080fd5b50610147610274565b604051610154919061071d565b60405180910390f35b34801561016957600080fd5b5061017261029a565b005b34801561018057600080fd5b506101896104d5565b60405161019691906107b3565b60405180910390f35b3480156101ab57600080fd5b506101c660048036038101906101c1919061060a565b61050f565b6040516101d39190610738565b60405180910390f35b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026590610793565b60405180910390fd5b47905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032190610793565b60405180910390fd5b60036000805490501015610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90610753565b60405180910390fd5b600061037d6104d5565b9050600080600080549050836103939190610837565b9050600081815481106103cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff166108fc61041e6101dc565b9081150290604051600060405180830381858888f19350505050158015610449573d6000803e3d6000fd5b50600067ffffffffffffffff81111561048b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156104b95781602001602082028036833780820191505090505b50600090805190602001906104cf92919061054e565b50505050565b600044426000805490506040516020016104f1939291906106e0565b6040516020818303038152906040528051906020012060001c905090565b6000818154811061051f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8280548282559060005260206000209081019282156105c7579160200282015b828111156105c65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061056e565b5b5090506105d491906105d8565b5090565b5b808211156105f15760008160009055506001016105d9565b5090565b60008135905061060481610912565b92915050565b60006020828403121561061c57600080fd5b600061062a848285016105f5565b91505092915050565b61063c816107f1565b82525050565b61064b816107df565b82525050565b600061065e6013836107ce565b915061066982610897565b602082019050919050565b60006106816014836107ce565b915061068c826108c0565b602082019050919050565b60006106a46009836107ce565b91506106af826108e9565b602082019050919050565b6106c381610823565b82525050565b6106da6106d582610823565b61082d565b82525050565b60006106ec82866106c9565b6020820191506106fc82856106c9565b60208201915061070c82846106c9565b602082019150819050949350505050565b60006020820190506107326000830184610642565b92915050565b600060208201905061074d6000830184610633565b92915050565b6000602082019050818103600083015261076c81610651565b9050919050565b6000602082019050818103600083015261078c81610674565b9050919050565b600060208201905081810360008301526107ac81610697565b9050919050565b60006020820190506107c860008301846106ba565b92915050565b600082825260208201905092915050565b60006107ea82610803565b9050919050565b60006107fc82610803565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b600061084282610823565b915061084d83610823565b92508261085d5761085c610868565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f63616e206e6f74206c657373207468616e203300000000000000000000000000600082015250565b7f6e6f7420656e6f75676820302e31206574686572000000000000000000000000600082015250565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b61091b81610823565b811461092657600080fd5b5056fea264697066735822122043bc0b566e2353bad8f38666a5371d3084babeebf7dfbfea784512f87712e02964736f6c63430008040033";

export class Lottery__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lottery> {
    return super.deploy(overrides || {}) as Promise<Lottery>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Lottery {
    return super.attach(address) as Lottery;
  }
  connect(signer: Signer): Lottery__factory {
    return super.connect(signer) as Lottery__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LotteryInterface {
    return new utils.Interface(_abi) as LotteryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Lottery {
    return new Contract(address, _abi, signerOrProvider) as Lottery;
  }
}
