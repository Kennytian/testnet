/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Auction, AuctionInterface } from "../../contracts/Auction";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "auctionState",
    outputs: [
      {
        internalType: "enum Auction.State",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "bids",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "endBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "finalizeAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBidder",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highestBindingBid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ipfsHash",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "placeBid",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460006101000a81548160ff021916908360038111156200007b576200007a620000d4565b5b02179055504360018190555060036001546200009891906200013c565b6002819055506040518060200160405280600081525060039081620000be919062000409565b50670de0b6b3a7640000600881905550620004f0565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001498262000103565b9150620001568362000103565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200018e576200018d6200010d565b5b828201905092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200021b57607f821691505b602082108103620002315762000230620001d3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200029b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200025c565b620002a786836200025c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620002ea620002e4620002de8462000103565b620002bf565b62000103565b9050919050565b6000819050919050565b6200030683620002c9565b6200031e6200031582620002f1565b84845462000269565b825550505050565b600090565b6200033562000326565b62000342818484620002fb565b505050565b5b818110156200036a576200035e6000826200032b565b60018101905062000348565b5050565b601f821115620003b957620003838162000237565b6200038e846200024c565b810160208510156200039e578190505b620003b6620003ad856200024c565b83018262000347565b50505b505050565b600082821c905092915050565b6000620003de60001984600802620003be565b1980831691505092915050565b6000620003f98383620003cb565b9150826002028217905092915050565b620004148262000199565b67ffffffffffffffff81111562000430576200042f620001a4565b5b6200043c825462000202565b620004498282856200036e565b600060209050601f8311600181146200048157600084156200046c578287015190505b620004788582620003eb565b865550620004e8565b601f198416620004918662000237565b60005b82811015620004bb5784890151825560018201915060208501945060208101905062000494565b86831015620004db5784890151620004d7601f891682620003cb565b8355505b6001600288020188555050505b505050505050565b610e1f80620005006000396000f3fe60806040526004361061009c5760003560e01c80638fa8b790116100645780638fa8b7901461018a57806391f90157146101a1578063c623674f146101cc578063ecfc7ecc146101f7578063f5b56c5614610201578063f77282ab1461022c5761009c565b8063083c6323146100a157806348cd4cb1146100cc57806362ea82db146100f75780637fb45099146101345780638da5cb5b1461015f575b600080fd5b3480156100ad57600080fd5b506100b6610243565b6040516100c39190610a9c565b60405180910390f35b3480156100d857600080fd5b506100e1610249565b6040516100ee9190610a9c565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610b1a565b61024f565b60405161012b9190610a9c565b60405180910390f35b34801561014057600080fd5b50610149610267565b6040516101569190610bbe565b60405180910390f35b34801561016b57600080fd5b5061017461027a565b6040516101819190610bfa565b60405180910390f35b34801561019657600080fd5b5061019f61029e565b005b3480156101ad57600080fd5b506101b6610323565b6040516101c39190610bfa565b60405180910390f35b3480156101d857600080fd5b506101e1610349565b6040516101ee9190610cae565b60405180910390f35b6101ff6103d7565b005b34801561020d57600080fd5b506102166106a6565b6040516102239190610a9c565b60405180910390f35b34801561023857600080fd5b506102416106ac565b005b60025481565b60015481565b60076020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102f657600080fd5b6003600460006101000a81548160ff0219169083600381111561031c5761031b610b47565b5b0217905550565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6003805461035690610cff565b80601f016020809104026020016040519081016040528092919081815260200182805461038290610cff565b80156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361042f57600080fd5b60015443101561043e57600080fd5b60025443111561044d57600080fd5b6001600381111561046157610460610b47565b5b600460009054906101000a900460ff16600381111561048357610482610b47565b5b1461048d57600080fd5b606434101561049b57600080fd5b600034600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104e89190610d5f565b905060055481116104f857600080fd5b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481116105e3576105d8600854826105719190610d5f565b60076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a68565b6005819055506106a3565b61065b8160085460076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106569190610d5f565b610a68565b60058190555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60055481565b6003808111156106bf576106be610b47565b5b600460009054906101000a900460ff1660038111156106e1576106e0610b47565b5b14806106ee575060025443115b6106f757600080fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061079057506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b61079957600080fd5b6000806003808111156107af576107ae610b47565b5b600460009054906101000a900460ff1660038111156107d1576107d0610b47565b5b0361082057339150600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109d8565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036108a05760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060055490506109d7565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361099057600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915060055460076000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109899190610db5565b90506109d6565b339150600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b5b5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a63573d6000803e3d6000fd5b505050565b6000818311610a7957829050610a7d565b8190505b92915050565b6000819050919050565b610a9681610a83565b82525050565b6000602082019050610ab16000830184610a8d565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae782610abc565b9050919050565b610af781610adc565b8114610b0257600080fd5b50565b600081359050610b1481610aee565b92915050565b600060208284031215610b3057610b2f610ab7565b5b6000610b3e84828501610b05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610b8757610b86610b47565b5b50565b6000819050610b9882610b76565b919050565b6000610ba882610b8a565b9050919050565b610bb881610b9d565b82525050565b6000602082019050610bd36000830184610baf565b92915050565b6000610be482610abc565b9050919050565b610bf481610bd9565b82525050565b6000602082019050610c0f6000830184610beb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c4f578082015181840152602081019050610c34565b83811115610c5e576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c8082610c15565b610c8a8185610c20565b9350610c9a818560208601610c31565b610ca381610c64565b840191505092915050565b60006020820190508181036000830152610cc88184610c75565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d1757607f821691505b602082108103610d2a57610d29610cd0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6a82610a83565b9150610d7583610a83565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610daa57610da9610d30565b5b828201905092915050565b6000610dc082610a83565b9150610dcb83610a83565b925082821015610dde57610ddd610d30565b5b82820390509291505056fea2646970667358221220668d62331cdf2d0b0d712ddfd7fd7079c9505cb7c6561b97a2a4f1794a51e3da64736f6c634300080f0033";

type AuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auction__factory extends ContractFactory {
  constructor(...args: AuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Auction> {
    return super.deploy(overrides || {}) as Promise<Auction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Auction {
    return super.attach(address) as Auction;
  }
  override connect(signer: Signer): Auction__factory {
    return super.connect(signer) as Auction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionInterface {
    return new utils.Interface(_abi) as AuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Auction {
    return new Contract(address, _abi, signerOrProvider) as Auction;
  }
}
