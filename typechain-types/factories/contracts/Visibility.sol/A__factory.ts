/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { A, AInterface } from "../../../contracts/Visibility.sol/A";

const _abi = [
  {
    inputs: [],
    name: "f2",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "f4",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "f5",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getY",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600a600055601460015534801561001a57600080fd5b5061019c8061002a6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630b7f16651461005c5780630c55699c1461007a5780633c9d377d146100985780639942ec6f146100b6578063c3f90202146100d4575b600080fd5b6100646100f2565b604051610071919061014b565b60405180910390f35b6100826100fc565b60405161008f919061014b565b60405180910390f35b6100a0610102565b6040516100ad919061014b565b60405180910390f35b6100be61010c565b6040516100cb919061014b565b60405180910390f35b6100dc610120565b6040516100e9919061014b565b60405180910390f35b6000600154905090565b60005481565b6000808091505090565b600080610117610129565b90508091505090565b60008054905090565b60008054905090565b6000819050919050565b61014581610132565b82525050565b6000602082019050610160600083018461013c565b9291505056fea2646970667358221220c89703109499d50e048c8eb15025670a834a4acf10e86fd169365c5c599c436e64736f6c634300080f0033";

type AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class A__factory extends ContractFactory {
  constructor(...args: AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<A> {
    return super.deploy(overrides || {}) as Promise<A>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): A {
    return super.attach(address) as A;
  }
  override connect(signer: Signer): A__factory {
    return super.connect(signer) as A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AInterface {
    return new utils.Interface(_abi) as AInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): A {
    return new Contract(address, _abi, signerOrProvider) as A;
  }
}
