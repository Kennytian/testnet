/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Cryptos,
  CryptosInterface,
} from "../../../contracts/ERC20StateVars.sol/Cryptos";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokens",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "founder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokens",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280600781526020017f43727970746f73000000000000000000000000000000000000000000000000008152506000908051906020019061004f929190610166565b506040518060400160405280600481526020017f43525054000000000000000000000000000000000000000000000000000000008152506001908051906020019061009b929190610166565b5060006002553480156100ad57600080fd5b50620f424060038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060035460056000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061026a565b82805461017290610209565b90600052602060002090601f01602090048101928261019457600085556101db565b82601f106101ad57805160ff19168380011785556101db565b828001600101855582156101db579182015b828111156101da5782518255916020019190600101906101bf565b5b5090506101e891906101ec565b5090565b5b808211156102055760008160009055506001016101ed565b5090565b6000600282049050600182168061022157607f821691505b602082108114156102355761023461023b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610859806102796000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80634d853ee51161005b5780634d853ee51461011757806370a082311461013557806395d89b4114610165578063a9059cbb1461018357610088565b806306fdde031461008d57806318160ddd146100ab57806327e235e3146100c9578063313ce567146100f9575b600080fd5b6100956101b3565b6040516100a291906105f6565b60405180910390f35b6100b3610241565b6040516100c09190610618565b60405180910390f35b6100e360048036038101906100de91906104f5565b610247565b6040516100f09190610618565b60405180910390f35b61010161025f565b60405161010e9190610618565b60405180910390f35b61011f610265565b60405161012c91906105c0565b60405180910390f35b61014f600480360381019061014a91906104f5565b61028b565b60405161015c9190610618565b60405180910390f35b61016d6102d4565b60405161017a91906105f6565b60405180910390f35b61019d6004803603810190610198919061051e565b610362565b6040516101aa91906105db565b60405180910390f35b600080546101c090610754565b80601f01602080910402602001604051908101604052809291908181526020018280546101ec90610754565b80156102395780601f1061020e57610100808354040283529160200191610239565b820191906000526020600020905b81548152906001019060200180831161021c57829003601f168201915b505050505081565b60035481565b60056020528060005260406000206000915090505481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600180546102e190610754565b80601f016020809104026020016040519081016040528092919081815260200182805461030d90610754565b801561035a5780601f1061032f5761010080835404028352916020019161035a565b820191906000526020600020905b81548152906001019060200180831161033d57829003601f168201915b505050505081565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103b057600080fd5b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103ff919061064f565b9250508190555081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461045591906106a5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516104b99190610618565b60405180910390a36001905092915050565b6000813590506104da816107f5565b92915050565b6000813590506104ef8161080c565b92915050565b60006020828403121561050757600080fd5b6000610515848285016104cb565b91505092915050565b6000806040838503121561053157600080fd5b600061053f858286016104cb565b9250506020610550858286016104e0565b9150509250929050565b610563816106d9565b82525050565b610572816106eb565b82525050565b600061058382610633565b61058d818561063e565b935061059d818560208601610721565b6105a6816107e4565b840191505092915050565b6105ba81610717565b82525050565b60006020820190506105d5600083018461055a565b92915050565b60006020820190506105f06000830184610569565b92915050565b600060208201905081810360008301526106108184610578565b905092915050565b600060208201905061062d60008301846105b1565b92915050565b600081519050919050565b600082825260208201905092915050565b600061065a82610717565b915061066583610717565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561069a57610699610786565b5b828201905092915050565b60006106b082610717565b91506106bb83610717565b9250828210156106ce576106cd610786565b5b828203905092915050565b60006106e4826106f7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b8381101561073f578082015181840152602081019050610724565b8381111561074e576000848401525b50505050565b6000600282049050600182168061076c57607f821691505b602082108114156107805761077f6107b5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6107fe816106d9565b811461080957600080fd5b50565b61081581610717565b811461082057600080fd5b5056fea2646970667358221220ccbc95573ff3a226db0716899e1f36dfcd5883217dc7a7288548a5f354c8cef364736f6c63430008040033";

type CryptosConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CryptosConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cryptos__factory extends ContractFactory {
  constructor(...args: CryptosConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cryptos> {
    return super.deploy(overrides || {}) as Promise<Cryptos>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cryptos {
    return super.attach(address) as Cryptos;
  }
  override connect(signer: Signer): Cryptos__factory {
    return super.connect(signer) as Cryptos__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CryptosInterface {
    return new utils.Interface(_abi) as CryptosInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cryptos {
    return new Contract(address, _abi, signerOrProvider) as Cryptos;
  }
}
