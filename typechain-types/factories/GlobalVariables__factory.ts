/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GlobalVariables,
  GlobalVariablesInterface,
} from "../GlobalVariables";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "blockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "difficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "howMuchGas",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sentEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sentValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "thisMoment",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040524260025543600355446004554560055534801561002057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104c7806100706000396000f3fe6080604052600436106100915760003560e01c80636dcb8d84116100595780636dcb8d84146101385780638da5cb5b14610163578063997b3d831461018e578063b332fb5e146101b9578063f68016b7146101e457610091565b806312065fe01461009657806319cae462146100c157806336e1f1fc146100ec57806357e871e7146100f657806362a0947714610121575b600080fd5b3480156100a257600080fd5b506100ab61020f565b6040516100b89190610334565b60405180910390f35b3480156100cd57600080fd5b506100d6610217565b6040516100e39190610334565b60405180910390f35b6100f461021d565b005b34801561010257600080fd5b5061010b610226565b6040516101189190610334565b60405180910390f35b34801561012d57600080fd5b5061013661022c565b005b34801561014457600080fd5b5061014d61026e565b60405161015a9190610334565b60405180910390f35b34801561016f57600080fd5b50610178610274565b6040516101859190610319565b60405180910390f35b34801561019a57600080fd5b506101a3610298565b6040516101b09190610334565b60405180910390f35b3480156101c557600080fd5b506101ce6102ef565b6040516101db9190610334565b60405180910390f35b3480156101f057600080fd5b506101f96102f5565b6040516102069190610334565b60405180910390f35b600047905090565b60045481565b34600181905550565b60035481565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000805a90506000600190506000600190505b60148110156102d55780826102c0919061034f565b915080806102cd90610419565b9150506102ab565b5060005a905080836102e791906103a9565b935050505090565b60025481565b60055481565b610304816103dd565b82525050565b6103138161040f565b82525050565b600060208201905061032e60008301846102fb565b92915050565b6000602082019050610349600083018461030a565b92915050565b600061035a8261040f565b91506103658361040f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561039e5761039d610462565b5b828202905092915050565b60006103b48261040f565b91506103bf8361040f565b9250828210156103d2576103d1610462565b5b828203905092915050565b60006103e8826103ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006104248261040f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561045757610456610462565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220d4c0ff54c53373152ee8328868f875fbe8f889d281de97fdeac02e988c13f0c464736f6c63430008040033";

export class GlobalVariables__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GlobalVariables> {
    return super.deploy(overrides || {}) as Promise<GlobalVariables>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GlobalVariables {
    return super.attach(address) as GlobalVariables;
  }
  connect(signer: Signer): GlobalVariables__factory {
    return super.connect(signer) as GlobalVariables__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GlobalVariablesInterface {
    return new utils.Interface(_abi) as GlobalVariablesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GlobalVariables {
    return new Contract(address, _abi, signerOrProvider) as GlobalVariables;
  }
}
