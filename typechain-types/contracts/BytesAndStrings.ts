/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BytesAndStringsInterface extends utils.Interface {
  functions: {
    "addElement()": FunctionFragment;
    "b1()": FunctionFragment;
    "getElement(uint256)": FunctionFragment;
    "getLength()": FunctionFragment;
    "s1()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addElement"
      | "b1"
      | "getElement"
      | "getLength"
      | "s1"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addElement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "b1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getElement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getLength", values?: undefined): string;
  encodeFunctionData(functionFragment: "s1", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addElement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getElement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "s1", data: BytesLike): Result;

  events: {};
}

export interface BytesAndStrings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BytesAndStringsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addElement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    b1(overrides?: CallOverrides): Promise<[string]>;

    getElement(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    s1(overrides?: CallOverrides): Promise<[string]>;
  };

  addElement(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  b1(overrides?: CallOverrides): Promise<string>;

  getElement(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getLength(overrides?: CallOverrides): Promise<BigNumber>;

  s1(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addElement(overrides?: CallOverrides): Promise<void>;

    b1(overrides?: CallOverrides): Promise<string>;

    getElement(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    s1(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addElement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    b1(overrides?: CallOverrides): Promise<BigNumber>;

    getElement(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(overrides?: CallOverrides): Promise<BigNumber>;

    s1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addElement(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    b1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getElement(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
