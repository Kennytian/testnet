/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AcademyInterface extends utils.Interface {
  functions: {
    "academyInstructor()": FunctionFragment;
    "academyState()": FunctionFragment;
    "changeInstructor(uint256,string,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "academyInstructor"
      | "academyState"
      | "changeInstructor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "academyInstructor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "academyState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeInstructor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "academyInstructor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "academyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeInstructor",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Academy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AcademyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    academyInstructor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        age: BigNumber;
        name: string;
        addr: string;
      }
    >;

    academyState(overrides?: CallOverrides): Promise<[number]>;

    changeInstructor(
      _age: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  academyInstructor(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & { age: BigNumber; name: string; addr: string }
  >;

  academyState(overrides?: CallOverrides): Promise<number>;

  changeInstructor(
    _age: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    academyInstructor(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        age: BigNumber;
        name: string;
        addr: string;
      }
    >;

    academyState(overrides?: CallOverrides): Promise<number>;

    changeInstructor(
      _age: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    academyInstructor(overrides?: CallOverrides): Promise<BigNumber>;

    academyState(overrides?: CallOverrides): Promise<BigNumber>;

    changeInstructor(
      _age: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    academyInstructor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    academyState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeInstructor(
      _age: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
