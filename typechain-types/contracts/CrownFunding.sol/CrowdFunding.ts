/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CrowdFundingInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "contribute()": FunctionFragment;
    "contributors(address)": FunctionFragment;
    "createRequest(string,address,uint256)": FunctionFragment;
    "deadline()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getRefund()": FunctionFragment;
    "goal()": FunctionFragment;
    "makePayment(uint256)": FunctionFragment;
    "minimumContribution()": FunctionFragment;
    "noOfContributors()": FunctionFragment;
    "numRequests()": FunctionFragment;
    "raisedAmount()": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "voteRequest(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "contribute"
      | "contributors"
      | "createRequest"
      | "deadline"
      | "getBalance"
      | "getRefund"
      | "goal"
      | "makePayment"
      | "minimumContribution"
      | "noOfContributors"
      | "numRequests"
      | "raisedAmount"
      | "requests"
      | "voteRequest"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRefund", values?: undefined): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makePayment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noOfContributors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raisedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteRequest",
    data: BytesLike
  ): Result;

  events: {
    "ContributeEvent(address,uint256)": EventFragment;
    "CreateRequestEvent(string,address,uint256)": EventFragment;
    "MakePaymentEvent(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributeEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateRequestEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakePaymentEvent"): EventFragment;
}

export interface ContributeEventEventObject {
  _sender: string;
  _value: BigNumber;
}
export type ContributeEventEvent = TypedEvent<
  [string, BigNumber],
  ContributeEventEventObject
>;

export type ContributeEventEventFilter = TypedEventFilter<ContributeEventEvent>;

export interface CreateRequestEventEventObject {
  _description: string;
  _repipient: string;
  _value: BigNumber;
}
export type CreateRequestEventEvent = TypedEvent<
  [string, string, BigNumber],
  CreateRequestEventEventObject
>;

export type CreateRequestEventEventFilter =
  TypedEventFilter<CreateRequestEventEvent>;

export interface MakePaymentEventEventObject {
  _recipient: string;
  _value: BigNumber;
}
export type MakePaymentEventEvent = TypedEvent<
  [string, BigNumber],
  MakePaymentEventEventObject
>;

export type MakePaymentEventEventFilter =
  TypedEventFilter<MakePaymentEventEvent>;

export interface CrowdFunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdFundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createRequest(
      _description: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    goal(overrides?: CallOverrides): Promise<[BigNumber]>;

    makePayment(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minimumContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    noOfContributors(overrides?: CallOverrides): Promise<[BigNumber]>;

    numRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    raisedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        description: string;
        recipient: string;
        value: BigNumber;
        completed: boolean;
        noOfVoters: BigNumber;
      }
    >;

    voteRequest(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  contribute(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createRequest(
    _description: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRefund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  goal(overrides?: CallOverrides): Promise<BigNumber>;

  makePayment(
    _requestNo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

  noOfContributors(overrides?: CallOverrides): Promise<BigNumber>;

  numRequests(overrides?: CallOverrides): Promise<BigNumber>;

  raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  requests(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, BigNumber] & {
      description: string;
      recipient: string;
      value: BigNumber;
      completed: boolean;
      noOfVoters: BigNumber;
    }
  >;

  voteRequest(
    _requestNo: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    contribute(overrides?: CallOverrides): Promise<void>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRequest(
      _description: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRefund(overrides?: CallOverrides): Promise<void>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    makePayment(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    noOfContributors(overrides?: CallOverrides): Promise<BigNumber>;

    numRequests(overrides?: CallOverrides): Promise<BigNumber>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        description: string;
        recipient: string;
        value: BigNumber;
        completed: boolean;
        noOfVoters: BigNumber;
      }
    >;

    voteRequest(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContributeEvent(address,uint256)"(
      _sender?: null,
      _value?: null
    ): ContributeEventEventFilter;
    ContributeEvent(_sender?: null, _value?: null): ContributeEventEventFilter;

    "CreateRequestEvent(string,address,uint256)"(
      _description?: null,
      _repipient?: null,
      _value?: null
    ): CreateRequestEventEventFilter;
    CreateRequestEvent(
      _description?: null,
      _repipient?: null,
      _value?: null
    ): CreateRequestEventEventFilter;

    "MakePaymentEvent(address,uint256)"(
      _recipient?: null,
      _value?: null
    ): MakePaymentEventEventFilter;
    MakePaymentEvent(
      _recipient?: null,
      _value?: null
    ): MakePaymentEventEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRequest(
      _description: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    goal(overrides?: CallOverrides): Promise<BigNumber>;

    makePayment(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    noOfContributors(overrides?: CallOverrides): Promise<BigNumber>;

    numRequests(overrides?: CallOverrides): Promise<BigNumber>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteRequest(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRequest(
      _description: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRefund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    goal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makePayment(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minimumContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noOfContributors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteRequest(
      _requestNo: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
