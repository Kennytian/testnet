/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GlobalVariablesInterface extends utils.Interface {
  functions: {
    "blockNumber()": FunctionFragment;
    "changeOwner()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "gasLimit()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "howMuchGas()": FunctionFragment;
    "owner()": FunctionFragment;
    "sentEther()": FunctionFragment;
    "sentValue()": FunctionFragment;
    "thisMoment()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "blockNumber"
      | "changeOwner"
      | "difficulty"
      | "gasLimit"
      | "getBalance"
      | "howMuchGas"
      | "owner"
      | "sentEther"
      | "sentValue"
      | "thisMoment"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "howMuchGas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "sentEther", values?: undefined): string;
  encodeFunctionData(functionFragment: "sentValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "thisMoment",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "blockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "howMuchGas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sentEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sentValue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "thisMoment", data: BytesLike): Result;

  events: {};
}

export interface GlobalVariables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GlobalVariablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    difficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    howMuchGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    sentEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sentValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    thisMoment(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  changeOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  howMuchGas(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  sentEther(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sentValue(overrides?: CallOverrides): Promise<BigNumber>;

  thisMoment(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(overrides?: CallOverrides): Promise<void>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    howMuchGas(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    sentEther(overrides?: CallOverrides): Promise<void>;

    sentValue(overrides?: CallOverrides): Promise<BigNumber>;

    thisMoment(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    blockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    howMuchGas(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    sentEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sentValue(overrides?: CallOverrides): Promise<BigNumber>;

    thisMoment(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    blockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    howMuchGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sentEther(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    thisMoment(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
